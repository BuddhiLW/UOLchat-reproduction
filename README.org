#+AUTHOR: BuddhiLW
#+STARTUP: latexpreview
#+PROPERTY: header-args:js :tangle ./code/js/website-logic.js :mkdirp yes


* UOLchat-reproduction
This project intend to reproduce the UOL-chat experience. It's a challenge-exercise from the Respode AÃ­ Bootcamp - project number 5.

* Notation convention
=e= denotes element <-> DOM elements, lists, nodes, etc.
=c= or =p= denotes class or property; both will be used interchangebly.

* Javascript
** Useful functions to append a list of elements in a HTML document
#+begin_src js :tangle ./code/js/website-logic.js :mkdirp yes
  alert();
  var querier = (e) => document.querySelector(e);
  var populateWith = (e) => (c) => e.appendChild(c.cloneNode(true));

  var chat = querier('.chat');
  let createElement = e => document.createElement(e);
  var querierAll = s => document.querySelectorAll(s);

  var remover = e => c => e.classList.remove(c);
  var cons = e => c => e.classList.add(c);
#+end_src
** Populate chat
*** Populate [obj-> html]
We are imagining that the message is purely obj with =key:content=. So, our populate-function will be expecting that.

#+begin_src js ./code/js/website-logic.js :mkdirp yes
  let createMsg = message => document.createTextNode(message);
  let appendMsgNode = e => nodeMessage => e.appendChild(nodeMessage);  
  let populate = obj =>
      {let li = createElement('li');
       let list = mapKeys(obj);
       assignClass(li)(list[3].textContent);
       orderAppendMsg(li)(list);
       chat.appendChild(li);
      };
  let populateWithId = obj =>
      {let li = createElement('li');
       let list = mapKeys(obj);
       assignClass(li)(list[3].textContent);
       assignId(li)("last");
       orderAppendMsg(li)(list);
       chat.appendChild(li);
      };
#+end_src

*** Load page messages
**** Requirements doc
Requirement: =Ao entrar no site, este deve carregar as mensagens do servidor e exibi-las conforme layout fornecido.=
#+caption: Load messages request documentation
#+ATTR_ORG: :width 400
[[file:./content/doc/getMessages.png]]

**** Here we get the messages-data from the server.
#+begin_src js
  let handleChat = api =>
      {let promisseChat = axios.get(api);
       promisseChat.then(dataPerform);
       promisseChat.catch(errorHandle);
      };
  var msgKeys = ["from", "to", "text", "type", "time"];
  let keys = obj => Object.keys(obj);
  let dataPerform = data => {let dataArray = data.data;
                             let lastThirty = dataArray.slice(Math.max(dataArray.length - 30, 1));
                             lastThirty.forEach((messageData, i) =>
                                 (i !== lastThirty.length - 1) ?
                                     populate(messageData) :
                                     populateWithId(messageData));
                             focus();
                            };
  let errorHandle = error => console.log(error);
  handleChat('https://mock-api.bootcamp.respondeai.com.br/api/v2/uol/messages');
#+end_src

**** Generate span with id
#+begin_src js 
  let assignId = e => identity => e.id = `${identity}`;
  let assignClass = e => c => e.classList.add(c);
  let spanNodeId = id =>
      {let span = createElement('span');
       assignId(span)(id);
       return span;
      };
  let populateNode = node => content => appendMsgNode(node)(createMsg(content));
  let createContent = id => content =>
      {let span = spanNodeId(id);
       populateNode(span)(content);
       return span;
      };
  let spanNodeClass = c =>
      {let span = createElement('span');
       assignClass(span)(c);
       return span;
      };
  let createContentClass = c => content =>
      {let span = spanNodeClass(c);
       populateNode(span)(content);
       return span;
      };
#+end_src

**** Span for each msgKey
#+begin_src js
  let mapKeys = object => {
      newList = [];
      Object.entries(object).forEach(e => newList.push(createContentClass(e[0])(e[1])));
      return newList;
  };
#+end_src

**** Reduce the list of spans to a usable string
#+begin_src js 
  let orderAppendMsg = li => list =>
      {li.innerHTML += "(";
       li.appendChild(list[4]);
       li.innerHTML +=")";
       li.appendChild(list[0]);
       li.innerHTML += "&nbsp; para";
       li.appendChild(list[1]);
       li.innerHTML += ":";
       li.appendChild(list[2]);
      };
#+end_src

** Populate every 3 seconds
#+begin_src js 
  function refreshData(){
      let seconds = 3; 
      let ul = querier('ul');
      ul.innerHTML = ""; 
      handleChat('https://mock-api.bootcamp.respondeai.com.br/api/v2/uol/messages');
      setTimeout(refreshData, seconds*1000);
  }
  // refreshData();
#+end_src

** Focus on the last chat message
#+begin_src js 
  let focus = () => querier('#last').scrollIntoView();  
#+end_src

* HTML
** Head of the document
#+begin_src html :tangle ./code/html/index.html :mkdirp yes
  <!DOCTYPE html>
  <html lang="en">

  <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <link href="../css/reset.css" rel="stylesheet"/>
      <link href="../css/chat.css" rel="stylesheet" />
      <link rel="preconnect" href="https://fonts.gstatic.com">
      <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,400;0,700;1,400&display=swap" rel="stylesheet">
      <title>uol</title>
  </head>
#+end_src

** Body
*** Menu
#+begin_src html :tangle ./code/html/index.html
  <body>
    <div class="project-container">
      <div class="menu">
        <div class="menu-logo"></div>
        <div class="menu-chat"></div>
      </div>
    #+end_src

*** Chat body
#+begin_src html :tangle ./code/html/index.html
  <ul class="chat">
  </ul>
#+end_src

*** Send-message foot
#+begin_src html :tangle ./code/html/index.html
  <div class="foot">
    <input class="message" type="text" placeholder="Let's chat!">
    <div class="send">
      <ion-icon name="send"></ion-icon>
    </div>
  </div>

  </div>
  <script src="https://unpkg.com/ionicons@4.5.10-0/dist/ionicons.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="../js/website-logic.js"></script>
  </body>

  </html>
#+end_src

* CSS
** Chat-page layout
*** Body
#+begin_src css :tangle ./code/css/chat.css :mkdirp yes
  body {
      background-color: lightpink;
      display: flex;
      align-content: center;
      z-index: -1;
      font-family: Roboto, sans-serif;
  }

  .project-container {
      background-color: #f3f3f3;
      display: flex;
      flex-direction: column;
      margin: 30px auto 0 auto;
      width: 375px;
      height: 667px;
      position: relative;
      border: 0px solid #f3f3f3;
      boder-radius: 3px;
  }
#+end_src

*** Header
#+begin_src css :tangle ./code/css/chat.css :mkdirp yes
  .menu {
      position: absolute;
      display: flex;
      flex: wrap;
      justify-concent: space-between;
      align-items: center;
      height: 80px;
      width: 100%;
      background-color: #FFFFFF;
      box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.05);
  }

  .menu .menu-logo {
      height: 53px;
      width: 75px;
      margin: 16px auto 11px 22px;
      display: inline-block;
      background-image: url("../../content/icon/logoUOL.png");
  }

  .menu .menu-chat {
      height: 31px;
      width: 42px;
      margin: 25px 22.5px 24px auto;
      display: inline-block;
      background-image: url("../../content/icon/people.png");
  }
#+end_src

*** Chat-body
#+begin_src css :tangle ./code/css/chat.css :mkdirp yes
  ul {
      position: relative;
      top: 80px;
      width: 375px;
      height: 507px;
      display: flex;
      flex-wrap: wrap;
      flex-direction: column;
      overflow-y: scroll;
      font-family: Roboto, sans-serif;
  }

  li {
      width: calc(100% - 16px);
      height: 40px;
      border-radius: 2px;
      display: flex;
      flex-wrap: wrap;
      font-size: 14px;
      line-height: 16px;
      align-items: center;
      margin-bottom: 4px;
      padding-right: 8px;
      padding-left: 8px;
      overflow-wrap: break-word;
  }

  li:first-of-type {
      margin-top: 26px;
  }

  li.status {
      background-color: #DCDCDC;
  }

  li.message {
      background-color: #FFF;
  }

  li.private_message {
      background: #FFDEDE;
  }

  li span {
      margin-left: 3px;
      margin-right: 0px;
  }
#+end_src

**** Chat-markdown
#+begin_src css :tangle ./code/css/chat.css
  .time {
      color: #b5b5b5;
  }

  .from {
      font-weight: 700;
  }

  .to {
      font-weight: 700;
  }
#+end_src
*** Foot 
#+begin_src css :tangle ./code/css/chat.css :mkdirp yes
  .foot {
      left: 0;
      bottom: 0;
      position: absolute;
      display: flex;
      flex: wrap;
      justify-concent: space-between;
      align-items: center;
      width: 100%;
      height: 80px;
      background-color: #fff;
      box-shadow: 0px -4px 6px rgb(0, 0, 0, 0.05);
      font-family: Roboto, sans-serif;
  }

  .foot ::placeholder {
      font-style: italic;
      font-weight: 400;
      color: #000;
  }

  .foot .message {
      height: 53px;
      width: calc(100% - 26px - 25px - 27px);
      margin: 25px 14px 25px 17px;
      display: inline-block;
      font-family: Roboto;
      font-style: normal;
      font-weight: normal;
      font-size: 18px;
      line-height: 21px;
  }


  .foot .send ion-icon {
      height: 26px;
      width: 26px;
      margin: 27px 18px 27px 14px;
      display: inline-block;
  }
#+end_src

**  Reset

#+begin_src css :tangle ./code/css/reset.css :mkdirp yes
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
    display: block;
}

body {
    line-height: 1;
}

ol,
ul {
    list-style: none;
}

blockquote,
q {
    quotes: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
    content: '';
    content: none;
}

table {
    border-collapse: collapse;
    border-spacing: 0;
}
#+end_src
